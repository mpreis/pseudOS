       	 	 +-------------------------+
		     |			CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Thomas HÃ¼tter, 1120239
Mario Preishuber, 1120643

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We implemented read-ahead as descripted below, but leads to several 
synchronisation issues. So we disabled read-ahead. 

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Extensions of filesys/inode.c:
	struct inode_disk
	{
	  /* meta */
	  off_t length;                             /* File size in bytes. */
	  block_sector_t direct[NR_OF_DIRECT];      /* 12 * BLOCK_SECTOR_SIZE = 6144 bytes. */
	  block_sector_t single_indirect;           /* 128 * BLOCK_SECTOR_SIZE = 65536 bytes. */
	  block_sector_t double_indirect;           /* 128 * 128 * BLOCK_SECTOR_SIZE = 8388608 bytes. */
	  bool is_dir;								/* Show if this inode represents a file or dir */
	  unsigned magic;                           /* Magic number. */
	  uint32_t unused [NR_OF_INDIRECT - NR_OF_DIRECT - 5];
	};

Like before inode_disk represents an inode which is hold on the disk 
to save the data persistent. 

	struct inode 
	{
		struct list_elem elem;                	/* Element in inode list. */
		block_sector_t sector;                	/* Sector number of disk location. */
		int open_cnt;                         	/* Number of openers. */
		bool removed;                         	/* True if deleted, false otherwise. */
		int deny_write_cnt;                   	/* 0: writes ok, >0: deny writes. */
		struct lock lock;						/* Fine-grained lock per inode */

		bool is_dir;							/* Show if this inode represents a file or dir */
		off_t length;                         	/* File size in bytes. */
		block_sector_t direct[NR_OF_DIRECT];  	/* 12 * BLOCK_SECTOR_SIZE = 6144 bytes. */
		block_sector_t single_indirect;       	/* 128 * BLOCK_SECTOR_SIZE = 65536 bytes. */
		block_sector_t double_indirect;       	/* 128 * 128 * BLOCK_SECTOR_SIZE = 8388608 bytes. */
	};

struct unode is the in-memory representation of the inode. Compared 
with the previous implementation there is no reference on the 
disk_inode anymore, just the number of the disk sector where the 
disk_inode can be found.


>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.
#direct = 12 		 ->	#sectors =              12
#indirect = 1 		 ->	#sectors =             128
#double_indirect = 1 ->	#sectors = 128*128 = 16384
----------------------------------------------------
						#sectors_total =     16524
											 -----

The sector size is 512B, this leads to a maximum file size of
	max_file_size = 16524 * 512B = 8460288B
								   ========

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

All attempts to extend a file happens over inode_write_at. In the case 
that 2 processes try to extend at the same file at a time, we use the 
inode lock for making this exclusive. After the first process finishes 
the length is already set to the new value and the second process 
starts from this length on. 

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.


---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

As it is proposed in the documentation we decided to implement a UNIX 
like file system. This means we have 12 direct, 1 indirect and 1 
double-indirect blocks. Unlike in UNIX we haven't implemented a triple 
indirect block, because it is just required to support 8MB files, which 
is fine with direct, indirect and double indirect. 


			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Extensions of thread/threads.h:
    struct dir *cwd;		/* each thread needs to hold the directory 
    							he is currently working on */

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

To traverse a user-specified path, we go the logical way from the left 
the right. This means, at first we check if it is a absolute or a 
relative path by looking at the first symbol, which is a forward slash 
or not. For an absolute path we have to start at the root, otherwise we 
start at the current working directory. After that, we take each part of 
the directory name of the path and check if it exists. If so, we open it 
and go on with that folder. 

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

We have implemented a fine-grained locking mechanism at inode level. 
To avoid the above described situations we acquire a lock on the 
specific inode when removing or adding a directory. 

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

We have several check in our filesys_remove() implementation to avoid 
all unwanted situations. In particular we check if the directory 
which should be removed is the root or the current working directory. 
Furthermore we check if the directory is empty, just in this case it 
is allowed to remove it. 
In any case of failure we return false and tell the caller that 
removing the directory failed. 

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

Every process needs to know his actual working directory at any time, 
so the only useful way for us was to add a thread-local directory 
variable. 


			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

cache.h:

#define CACHE_SIZE 64					// number of cache entries (size of cache)
#define CACHE_SECTOR_IDX_DEFAULT 0		// initial sector value
#define CACHE_WRITE_BEHIND_PERIOD 100	// time to sleep of the write behind thread

struct cache_entry_t
{
	block_sector_t sector_idx;	// represents the data sector on disk
	void *buffer;				// cache bufer
	bool dirty;					// indiactes if the data has been changed since loading
	struct list_elem elem;
};

cache.c:

static struct list cache_used;	// a list of acutal used cache entries
static struct list cache_free;	// a list of acutal unused cache entries



---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We implemented a kind of a clock algorithm. There is one list (cache_used), 
which holds all acutal cached entries. And another list (cache_free), which 
holds unused cache entries. 

Is it necessary to evict a cache entrie we take the first entrie of the 
cache_used list, check if the entry is dirty, if so, we write the data back 
to disc. In both cases (entry is dirty or not) the next step is to reset 
the cache entry and to append it at the end of the cache_free list. 
If an new sector is cached, we take the first entry of the cache_free list,
load the data, and append it at the end of the cache_used list.

>> C3: Describe your implementation of write-behind.

During initialising the cache we create a thread, which handles the write-behind.
The methode the thread executes contains a infinit loop within the loop cache_flush
and timer_sleep is called. This results in a periodic flush of the cache.

>> C4: Describe your implementation of read-ahead.

During initialising the cache we create a thread, which handles the read-ahead.
At the end of the method cache_read we call a method cache_read_ahead, with the
index of the next sector as paramenter. cache_read_ahead checks if the given 
sector is already cached or if we have to load it. In case of loading we put the
sector on the cache_read_ahead_requests list. This list is used to communiacte with
the thread started during initialisation. We use a conditional variable to wakeup this
thread. The thread takes the first element of the cache_read_ahead_requets list and
loads it. This mechanism works similar as descript in the Pintos doumentaion A.3.4
Monitor.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

We use a global cache lock to prevent the eviction of cache entries. 

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

We take the first element of the list cache_used by calling 
list_pop_front. So it is not possible for any other thread to access
this cache entry. The global lock also helps to prevent others from
attempting to access. 

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

Buffer caching:
Caching reduces the disc reads/writes, which are expensiv operations. 
If we think of a situation where we modifiy a sector and check it
after writing, we need without cache 2 disc-read and 1 disc-write operation.
Using a cache allows us to handle the same case with 1 disc-read and
1 disc-write.

Read-ahead:
It happens very often, that a file is scanned. If we think of a file as 
sequencial memory, the probability that the following sector will be read
is high. The most expensive part of reading from the disc, is moving the
head. To reduce the moving we the following sector also. 

Write-behind:
If cache_write is called instead of block_write we expact that it is faster
(in average), but we also expact that the data is writen of disc. We beneift 
most of a cache if not the whole sector is write a one time. The data 
has not to be write immediately to the disc. The most efficient way to write
back the data would be to write if there is one other disc-I/O interaction.
It is also important to write the data periodically, because in case of 
a crach we don't want to loose to much data. 


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
